foo@system_table: {
  width: 420 argc: 1 rtype: VOID level: 1
  arglist:  (y)
  entries: {
    (name: y, type: INT, offset: 4)
    (name: z, type: INT, offset: 8)
    (name: arr, type: ARRAY, etype: int, base: 404, dims: 1, dim: [99])
    (name: bar, type: FUNC, offset: 412, mytab: bar@foo)
    (name: raw, type: FUNC, offset: 420, mytab: raw@foo)
  }
  code: [
PAR raw;
PAR arr;
PAR y;
t18 = CALL bar, 3;
  ]
}

raw@foo: {
  width: 8 argc: 1 rtype: INT level: 1
  arglist:  (x)
  entries: {
    (name: x, type: INT, offset: 4)
    (name: xyz, type: INT, offset: 8)
  }
  code: [
t11 = 0;
xyz = t11;
LABEL l7;
t12 = 10;
IF xyz < t12 THEN l3 ELSE l4;
LABEL l3;
t13 = 20;
IF xyz <= t13 THEN l5 ELSE l6;
LABEL l5;
t14 = 5;
t15 = x + t14;
x = t15;
t16 = 1;
t17 = xyz + t16;
xyz = t17;
GOTO l7;
LABEL l4;
LABEL l6;
RETURN x;
  ]
}

bar@foo: {
  width: 20 argc: 3 rtype: VOID level: 1
  arglist:  (x, a, soo)
  entries: {
    (name: x, type: INT, offset: 4)
    (name: a, type: ARRPTT, offset: 0)
    (name: soo, type: FUNPTT, offset: 12)
    (name: var1, type: INT, offset: 16)
    (name: var2, type: INT, offset: 20)
  }
  code: [
t0 = 1;
var1 = t0;
t1 = 1;
var1 = t1;
var2 = var1;
t2 = 50;
IF x < t2 THEN l0 ELSE l1;
LABEL l0;
t3 = 1;
t4 = x + t3;
PAR soo;
PAR a;
PAR t4;
t5 = CALL bar, 3;
GOTO l2;
LABEL l1;
t6 = 1;
t7 = var1 + t6;
PAR t7;
PAR x;
t8 = CALL soo, 2;
LABEL l2;
t9 = 1;
t10 = var2 + t9;
var2 = t10;
  ]
}

system_table: {
  width: 8 argc: 0 rtype: VOID level: 0
  arglist:  ()
  entries: {
    (name: foo, type: FUNC, offset: 8, mytab: foo@system_table)
  }
  code: [
t19 = 2;
t20 = 100;
t21 = t19 * t20;
PAR t21;
t22 = CALL foo, 1;
  ]
}

